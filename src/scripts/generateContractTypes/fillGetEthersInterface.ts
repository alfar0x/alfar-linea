import fs from "fs";

import { constantCase } from "change-case";

const transformImport = (source: string) =>
  `import { ${source}Interface } from "../types/ethers-v6/${source}/${source}";`;

const transformConstant = (source: string) =>
  `\tCONTRACT_${constantCase(source)},`;

const transformType = (source: string) =>
  `\t[CONTRACT_${constantCase(source)}]: ${source}Interface;`;

const fillGetEthersInterface = (params: {
  sources: string[];
  outputFile: string;
}) => {
  const { sources, outputFile } = params;

  const importsData = sources.map(transformImport).join("\n");

  const constantsData = sources.map(transformConstant).join("\n");

  const typesData = sources.map(transformType).join("\n");

  const data = `/* Autogenerated file. Do not edit manually. */
import fs from "fs";
import path from "path";

import { ethers } from "ethers";

import {
${constantsData}
} from "../constants/contracts";
${importsData}

export type ContractRec = {
${typesData}
};

const getEthersInterface = <C extends keyof ContractRec>(args: { name: C }) => {
  const { name } = args;

  const abiPath = path.join("./src/abi/sources/", name + ".json");

  const abiStr = fs.readFileSync(abiPath, { encoding: "utf-8" });

  const contract = new ethers.Interface(
    abiStr
  ) as unknown as ContractRec[typeof name];

  return contract;
};

export default getEthersInterface;

`;

  fs.writeFileSync(outputFile, data, { encoding: "utf-8" });
};

export default fillGetEthersInterface;

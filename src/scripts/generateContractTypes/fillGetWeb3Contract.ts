import fs from "fs";

import { constantCase } from "change-case";

const transformImport = (source: string) =>
  `import { ${source} } from "../types/web3-v1/${source}"`;

const transformConstant = (source: string) =>
  `\tCONTRACT_${constantCase(source)},`;

const transformType = (source: string) =>
  `\t[CONTRACT_${constantCase(source)}]: ${source};`;

const fillGetWeb3Contract = (params: {
  sources: string[];
  outputFile: string;
}) => {
  const { sources, outputFile } = params;

  const importsData = sources.map(transformImport).join("\n");

  const constantsData = sources.map(transformConstant).join("\n");

  const typesData = sources.map(transformType).join("\n");

  const data = `/* Autogenerated file. Do not edit manually. */
import fs from "fs";
import path from "path";

import Web3, { Contract, ContractAbi } from "web3";

import {
${constantsData}
} from "../constants/contracts";
${importsData}

export type ContractRec = {
${typesData}
};

const getWeb3Contract = <C extends keyof ContractRec>(args: {
  w3: Web3;
  name: C;
  address: string;
}) => {
  const { w3, name, address } = args;

  const abiPath = path.join("./src/abi/sources/", name + ".json");

  const abiStr = fs.readFileSync(abiPath, { encoding: "utf-8" });

  const abi = JSON.parse(abiStr) as ContractAbi;

  const checksumAddress = Web3.utils.toChecksumAddress(address.toUpperCase());

  const contract = new Contract(
    abi,
    checksumAddress,
    w3
  ) as unknown as ContractRec[typeof name];

  return contract;
};

export default getWeb3Contract;

  `;

  fs.writeFileSync(outputFile, data, { encoding: "utf-8" });
};

export default fillGetWeb3Contract;

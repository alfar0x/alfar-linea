import fs from "fs";

const transformImport = (source: string) =>
  `import { ${source} } from "../types/web3-v1/${source}"`;

const transformType = (source: string) => `${source}: ${source};`;

const fillGetWeb3Contract = (params: {
  sources: string[];
  outputFile: string;
}) => {
  const { sources, outputFile } = params;

  const importsData = sources.map(transformImport).join("\n");

  const typesData = sources.map(transformType).join("\n");

  const data = `/* Autogenerated file. Do not edit manually. */
import fs from "fs";
import path from "path";
import Web3, { Contract, ContractAbi } from "web3";

${importsData}

type ContractRec = {
${typesData}
};


const getWeb3Contract = <C extends keyof ContractRec>(name: C) => {
  const abiPath = path.join("./src/abi/sources/" + name + ".json");

  const abiStr = fs.readFileSync(abiPath, { encoding: "utf-8" });

  const abi = JSON.parse(abiStr) as ContractAbi;

  return (w3: Web3, address: string) => {
    const checksumAddress = Web3.utils.toChecksumAddress(address.toUpperCase());

    return new Contract(
      abi,
      checksumAddress,
      w3,
    ) as unknown as ContractRec[typeof name];
  };
};

export default getWeb3Contract;

`;

  fs.writeFileSync(outputFile, data, { encoding: "utf-8" });
};

export default fillGetWeb3Contract;

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace Constant {
  export type DistributionAccountInfoStruct = {
    accuredLAB: BigNumberish;
    boostedSupply: BigNumberish;
    boostedBorrow: BigNumberish;
    accPerShareSupply: BigNumberish;
    accPerShareBorrow: BigNumberish;
  };

  export type DistributionAccountInfoStructOutput = [
    accuredLAB: bigint,
    boostedSupply: bigint,
    boostedBorrow: bigint,
    accPerShareSupply: bigint,
    accPerShareBorrow: bigint
  ] & {
    accuredLAB: bigint;
    boostedSupply: bigint;
    boostedBorrow: bigint;
    accPerShareSupply: bigint;
    accPerShareBorrow: bigint;
  };

  export type DistributionAPYStruct = {
    apySupplyLab: BigNumberish;
    apyBorrowLab: BigNumberish;
    apyAccountSupplyLab: BigNumberish;
    apyAccountBorrowLab: BigNumberish;
  };

  export type DistributionAPYStructOutput = [
    apySupplyLab: bigint,
    apyBorrowLab: bigint,
    apyAccountSupplyLab: bigint,
    apyAccountBorrowLab: bigint
  ] & {
    apySupplyLab: bigint;
    apyBorrowLab: bigint;
    apyAccountSupplyLab: bigint;
    apyAccountBorrowLab: bigint;
  };

  export type DistributionInfoStruct = {
    supplySpeed: BigNumberish;
    borrowSpeed: BigNumberish;
    totalBoostedSupply: BigNumberish;
    totalBoostedBorrow: BigNumberish;
    accPerShareSupply: BigNumberish;
    accPerShareBorrow: BigNumberish;
    accruedAt: BigNumberish;
  };

  export type DistributionInfoStructOutput = [
    supplySpeed: bigint,
    borrowSpeed: bigint,
    totalBoostedSupply: bigint,
    totalBoostedBorrow: bigint,
    accPerShareSupply: bigint,
    accPerShareBorrow: bigint,
    accruedAt: bigint
  ] & {
    supplySpeed: bigint;
    borrowSpeed: bigint;
    totalBoostedSupply: bigint;
    totalBoostedBorrow: bigint;
    accPerShareSupply: bigint;
    accPerShareBorrow: bigint;
    accruedAt: bigint;
  };
}

export interface LineaBankLabDistributorInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "BOOST_MAX"
      | "BOOST_PORTION"
      | "LAB"
      | "accountDistributionInfoOf"
      | "accountDistributions"
      | "accuredLAB"
      | "approve"
      | "apyDistributionOf"
      | "boostedRatioOf"
      | "claim"
      | "compound"
      | "core"
      | "distributionInfoOf"
      | "distributions"
      | "initialize"
      | "initialized"
      | "kick"
      | "locker"
      | "notifyBorrowUpdated"
      | "notifySupplyUpdated"
      | "notifyTransferred"
      | "owner"
      | "pause"
      | "paused"
      | "priceCalculator"
      | "renounceOwnership"
      | "setDistributionSpeed"
      | "setLocker"
      | "setPriceCalculator"
      | "transferOwnership"
      | "unpause"
      | "updateAccountBoostedInfo"
      | "withdrawReward"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Claimed"
      | "Compound"
      | "DistributionSpeedUpdated"
      | "OwnershipTransferred"
      | "Paused"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(functionFragment: "BOOST_MAX", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "BOOST_PORTION",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "LAB", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "accountDistributionInfoOf",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "accountDistributions",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "accuredLAB",
    values: [AddressLike[], AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "apyDistributionOf",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "boostedRatioOf",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claim",
    values: [AddressLike[], AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "compound",
    values: [AddressLike[], AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "core", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "distributionInfoOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "distributions",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialized",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "kick", values: [AddressLike]): string;
  encodeFunctionData(functionFragment: "locker", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "notifyBorrowUpdated",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "notifySupplyUpdated",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "notifyTransferred",
    values: [AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "priceCalculator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setDistributionSpeed",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setLocker",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setPriceCalculator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateAccountBoostedInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawReward",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "BOOST_MAX", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "BOOST_PORTION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "LAB", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "accountDistributionInfoOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "accountDistributions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "accuredLAB", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "apyDistributionOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "boostedRatioOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "compound", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "core", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "distributionInfoOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "kick", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "locker", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "notifyBorrowUpdated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "notifySupplyUpdated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "notifyTransferred",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "priceCalculator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDistributionSpeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setLocker", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPriceCalculator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateAccountBoostedInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawReward",
    data: BytesLike
  ): Result;
}

export namespace ClaimedEvent {
  export type InputTuple = [user: AddressLike, amount: BigNumberish];
  export type OutputTuple = [user: string, amount: bigint];
  export interface OutputObject {
    user: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CompoundEvent {
  export type InputTuple = [user: AddressLike, amount: BigNumberish];
  export type OutputTuple = [user: string, amount: bigint];
  export interface OutputObject {
    user: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DistributionSpeedUpdatedEvent {
  export type InputTuple = [
    gToken: AddressLike,
    supplySpeed: BigNumberish,
    borrowSpeed: BigNumberish
  ];
  export type OutputTuple = [
    gToken: string,
    supplySpeed: bigint,
    borrowSpeed: bigint
  ];
  export interface OutputObject {
    gToken: string;
    supplySpeed: bigint;
    borrowSpeed: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface LineaBankLabDistributor extends BaseContract {
  connect(runner?: ContractRunner | null): LineaBankLabDistributor;
  waitForDeployment(): Promise<this>;

  interface: LineaBankLabDistributorInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  BOOST_MAX: TypedContractMethod<[], [bigint], "view">;

  BOOST_PORTION: TypedContractMethod<[], [bigint], "view">;

  LAB: TypedContractMethod<[], [string], "view">;

  accountDistributionInfoOf: TypedContractMethod<
    [market: AddressLike, account: AddressLike],
    [Constant.DistributionAccountInfoStructOutput],
    "view"
  >;

  accountDistributions: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        accuredLAB: bigint;
        boostedSupply: bigint;
        boostedBorrow: bigint;
        accPerShareSupply: bigint;
        accPerShareBorrow: bigint;
      }
    ],
    "view"
  >;

  accuredLAB: TypedContractMethod<
    [markets: AddressLike[], account: AddressLike],
    [bigint],
    "view"
  >;

  approve: TypedContractMethod<
    [_spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  apyDistributionOf: TypedContractMethod<
    [market: AddressLike, account: AddressLike],
    [Constant.DistributionAPYStructOutput],
    "view"
  >;

  boostedRatioOf: TypedContractMethod<
    [market: AddressLike, account: AddressLike],
    [
      [bigint, bigint] & {
        boostedSupplyRatio: bigint;
        boostedBorrowRatio: bigint;
      }
    ],
    "view"
  >;

  claim: TypedContractMethod<
    [markets: AddressLike[], account: AddressLike],
    [void],
    "nonpayable"
  >;

  compound: TypedContractMethod<
    [markets: AddressLike[], account: AddressLike],
    [void],
    "nonpayable"
  >;

  core: TypedContractMethod<[], [string], "view">;

  distributionInfoOf: TypedContractMethod<
    [market: AddressLike],
    [Constant.DistributionInfoStructOutput],
    "view"
  >;

  distributions: TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint, bigint] & {
        supplySpeed: bigint;
        borrowSpeed: bigint;
        totalBoostedSupply: bigint;
        totalBoostedBorrow: bigint;
        accPerShareSupply: bigint;
        accPerShareBorrow: bigint;
        accruedAt: bigint;
      }
    ],
    "view"
  >;

  initialize: TypedContractMethod<
    [
      _lab: AddressLike,
      _core: AddressLike,
      _locker: AddressLike,
      _priceCalculator: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  initialized: TypedContractMethod<[], [boolean], "view">;

  kick: TypedContractMethod<[user: AddressLike], [void], "nonpayable">;

  locker: TypedContractMethod<[], [string], "view">;

  notifyBorrowUpdated: TypedContractMethod<
    [market: AddressLike, user: AddressLike],
    [void],
    "nonpayable"
  >;

  notifySupplyUpdated: TypedContractMethod<
    [market: AddressLike, user: AddressLike],
    [void],
    "nonpayable"
  >;

  notifyTransferred: TypedContractMethod<
    [qToken: AddressLike, sender: AddressLike, receiver: AddressLike],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  priceCalculator: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setDistributionSpeed: TypedContractMethod<
    [qToken: AddressLike, supplySpeed: BigNumberish, borrowSpeed: BigNumberish],
    [void],
    "nonpayable"
  >;

  setLocker: TypedContractMethod<[_locker: AddressLike], [void], "nonpayable">;

  setPriceCalculator: TypedContractMethod<
    [_priceCalculator: AddressLike],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  updateAccountBoostedInfo: TypedContractMethod<
    [user: AddressLike],
    [void],
    "nonpayable"
  >;

  withdrawReward: TypedContractMethod<
    [receiver: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "BOOST_MAX"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "BOOST_PORTION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "LAB"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "accountDistributionInfoOf"
  ): TypedContractMethod<
    [market: AddressLike, account: AddressLike],
    [Constant.DistributionAccountInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "accountDistributions"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        accuredLAB: bigint;
        boostedSupply: bigint;
        boostedBorrow: bigint;
        accPerShareSupply: bigint;
        accPerShareBorrow: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "accuredLAB"
  ): TypedContractMethod<
    [markets: AddressLike[], account: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [_spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "apyDistributionOf"
  ): TypedContractMethod<
    [market: AddressLike, account: AddressLike],
    [Constant.DistributionAPYStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "boostedRatioOf"
  ): TypedContractMethod<
    [market: AddressLike, account: AddressLike],
    [
      [bigint, bigint] & {
        boostedSupplyRatio: bigint;
        boostedBorrowRatio: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "claim"
  ): TypedContractMethod<
    [markets: AddressLike[], account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "compound"
  ): TypedContractMethod<
    [markets: AddressLike[], account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "core"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "distributionInfoOf"
  ): TypedContractMethod<
    [market: AddressLike],
    [Constant.DistributionInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "distributions"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint, bigint] & {
        supplySpeed: bigint;
        borrowSpeed: bigint;
        totalBoostedSupply: bigint;
        totalBoostedBorrow: bigint;
        accPerShareSupply: bigint;
        accPerShareBorrow: bigint;
        accruedAt: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      _lab: AddressLike,
      _core: AddressLike,
      _locker: AddressLike,
      _priceCalculator: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "initialized"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "kick"
  ): TypedContractMethod<[user: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "locker"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "notifyBorrowUpdated"
  ): TypedContractMethod<
    [market: AddressLike, user: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "notifySupplyUpdated"
  ): TypedContractMethod<
    [market: AddressLike, user: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "notifyTransferred"
  ): TypedContractMethod<
    [qToken: AddressLike, sender: AddressLike, receiver: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "priceCalculator"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setDistributionSpeed"
  ): TypedContractMethod<
    [qToken: AddressLike, supplySpeed: BigNumberish, borrowSpeed: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setLocker"
  ): TypedContractMethod<[_locker: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPriceCalculator"
  ): TypedContractMethod<[_priceCalculator: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateAccountBoostedInfo"
  ): TypedContractMethod<[user: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawReward"
  ): TypedContractMethod<
    [receiver: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "Claimed"
  ): TypedContractEvent<
    ClaimedEvent.InputTuple,
    ClaimedEvent.OutputTuple,
    ClaimedEvent.OutputObject
  >;
  getEvent(
    key: "Compound"
  ): TypedContractEvent<
    CompoundEvent.InputTuple,
    CompoundEvent.OutputTuple,
    CompoundEvent.OutputObject
  >;
  getEvent(
    key: "DistributionSpeedUpdated"
  ): TypedContractEvent<
    DistributionSpeedUpdatedEvent.InputTuple,
    DistributionSpeedUpdatedEvent.OutputTuple,
    DistributionSpeedUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "Claimed(address,uint256)": TypedContractEvent<
      ClaimedEvent.InputTuple,
      ClaimedEvent.OutputTuple,
      ClaimedEvent.OutputObject
    >;
    Claimed: TypedContractEvent<
      ClaimedEvent.InputTuple,
      ClaimedEvent.OutputTuple,
      ClaimedEvent.OutputObject
    >;

    "Compound(address,uint256)": TypedContractEvent<
      CompoundEvent.InputTuple,
      CompoundEvent.OutputTuple,
      CompoundEvent.OutputObject
    >;
    Compound: TypedContractEvent<
      CompoundEvent.InputTuple,
      CompoundEvent.OutputTuple,
      CompoundEvent.OutputObject
    >;

    "DistributionSpeedUpdated(address,uint256,uint256)": TypedContractEvent<
      DistributionSpeedUpdatedEvent.InputTuple,
      DistributionSpeedUpdatedEvent.OutputTuple,
      DistributionSpeedUpdatedEvent.OutputObject
    >;
    DistributionSpeedUpdated: TypedContractEvent<
      DistributionSpeedUpdatedEvent.InputTuple,
      DistributionSpeedUpdatedEvent.OutputTuple,
      DistributionSpeedUpdatedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}

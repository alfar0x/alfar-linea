/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type { PancakeQuote, PancakeQuoteInterface } from "../PancakeQuote";

const _abi = [
  {
    type: "function",
    name: "quoteExactInputSingle",
    constant: false,
    payable: false,
    inputs: [
      {
        type: "tuple",
        name: "params",
        components: [
          {
            type: "address",
            name: "tokenIn",
          },
          {
            type: "address",
            name: "tokenOut",
          },
          {
            type: "uint256",
            name: "amountIn",
          },
          {
            type: "uint24",
            name: "fee",
          },
          {
            type: "uint160",
            name: "sqrtPriceLimitX96",
          },
        ],
      },
    ],
    outputs: [
      {
        type: "uint256",
        name: "amountOut",
      },
      {
        type: "uint160",
        name: "sqrtPriceX96After",
      },
      {
        type: "uint32",
        name: "initializedTicksCrossed",
      },
      {
        type: "uint256",
        name: "gasEstimate",
      },
    ],
  },
] as const;

export class PancakeQuote__factory {
  static readonly abi = _abi;
  static createInterface(): PancakeQuoteInterface {
    return new Interface(_abi) as PancakeQuoteInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): PancakeQuote {
    return new Contract(address, _abi, runner) as unknown as PancakeQuote;
  }
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace Constant {
  export type MarketInfoStruct = {
    isListed: boolean;
    supplyCap: BigNumberish;
    borrowCap: BigNumberish;
    collateralFactor: BigNumberish;
  };

  export type MarketInfoStructOutput = [
    isListed: boolean,
    supplyCap: bigint,
    borrowCap: bigint,
    collateralFactor: bigint
  ] & {
    isListed: boolean;
    supplyCap: bigint;
    borrowCap: bigint;
    collateralFactor: bigint;
  };
}

export interface LineaBankCoreInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "accountLiquidityOf"
      | "allMarkets"
      | "borrow"
      | "checkMembership"
      | "claimLab()"
      | "claimLab(address)"
      | "closeFactor"
      | "compoundLab"
      | "enterMarkets"
      | "exitMarket"
      | "initialize"
      | "initialized"
      | "keeper"
      | "labDistributor"
      | "liquidateBorrow"
      | "liquidationIncentive"
      | "listMarket"
      | "marketInfoOf"
      | "marketInfos"
      | "marketListOf"
      | "marketListOfUsers"
      | "markets"
      | "nftBorrow"
      | "nftCore"
      | "nftRepayBorrow"
      | "owner"
      | "pause"
      | "paused"
      | "priceCalculator"
      | "rebateDistributor"
      | "redeemToken"
      | "redeemUnderlying"
      | "removeMarket"
      | "renounceOwnership"
      | "repayBorrow"
      | "repayBorrowBehalf"
      | "setCloseFactor"
      | "setCollateralFactor"
      | "setKeeper"
      | "setLABDistributor"
      | "setLiquidationIncentive"
      | "setMarketBorrowCaps"
      | "setMarketSupplyCaps"
      | "setNftCore"
      | "setPriceCalculator"
      | "setRebateDistributor"
      | "setValidator"
      | "supply"
      | "transferOwnership"
      | "transferTokens"
      | "unpause"
      | "usersOfMarket"
      | "validator"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BorrowCapUpdated"
      | "CloseFactorUpdated"
      | "CollateralFactorUpdated"
      | "FlashLoan"
      | "KeeperUpdated"
      | "LABDistributorUpdated"
      | "LiquidationIncentiveUpdated"
      | "MarketEntered"
      | "MarketExited"
      | "MarketListed"
      | "MarketRedeem"
      | "MarketSupply"
      | "NftCoreUpdated"
      | "OwnershipTransferred"
      | "Paused"
      | "RebateDistributorUpdated"
      | "SupplyCapUpdated"
      | "Unpaused"
      | "ValidatorUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "accountLiquidityOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "allMarkets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "borrow",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkMembership",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimLab()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimLab(address)",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "closeFactor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "compoundLab",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "enterMarkets",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "exitMarket",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialized",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "keeper", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "labDistributor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidateBorrow",
    values: [AddressLike, AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidationIncentive",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "listMarket",
    values: [AddressLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "marketInfoOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "marketInfos",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "marketListOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "marketListOfUsers",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "markets",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nftBorrow",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "nftCore", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nftRepayBorrow",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "priceCalculator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rebateDistributor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "redeemToken",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemUnderlying",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeMarket",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "repayBorrow",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "repayBorrowBehalf",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCloseFactor",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCollateralFactor",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setKeeper",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setLABDistributor",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setLiquidationIncentive",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMarketBorrowCaps",
    values: [AddressLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setMarketSupplyCaps",
    values: [AddressLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setNftCore",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setPriceCalculator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setRebateDistributor",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setValidator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supply",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferTokens",
    values: [AddressLike, AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "usersOfMarket",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "validator", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "accountLiquidityOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allMarkets", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "borrow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "checkMembership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimLab()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimLab(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closeFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "compoundLab",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enterMarkets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "exitMarket", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "keeper", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "labDistributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidateBorrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidationIncentive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "listMarket", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "marketInfoOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketInfos",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketListOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketListOfUsers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "markets", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nftBorrow", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nftCore", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nftRepayBorrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "priceCalculator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rebateDistributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemUnderlying",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "repayBorrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "repayBorrowBehalf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCloseFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCollateralFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setKeeper", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setLABDistributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLiquidationIncentive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMarketBorrowCaps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMarketSupplyCaps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setNftCore", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPriceCalculator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRebateDistributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "supply", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "usersOfMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "validator", data: BytesLike): Result;
}

export namespace BorrowCapUpdatedEvent {
  export type InputTuple = [gToken: AddressLike, newBorrowCap: BigNumberish];
  export type OutputTuple = [gToken: string, newBorrowCap: bigint];
  export interface OutputObject {
    gToken: string;
    newBorrowCap: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CloseFactorUpdatedEvent {
  export type InputTuple = [newCloseFactor: BigNumberish];
  export type OutputTuple = [newCloseFactor: bigint];
  export interface OutputObject {
    newCloseFactor: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CollateralFactorUpdatedEvent {
  export type InputTuple = [
    gToken: AddressLike,
    newCollateralFactor: BigNumberish
  ];
  export type OutputTuple = [gToken: string, newCollateralFactor: bigint];
  export interface OutputObject {
    gToken: string;
    newCollateralFactor: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FlashLoanEvent {
  export type InputTuple = [
    target: AddressLike,
    initiator: AddressLike,
    asset: AddressLike,
    amount: BigNumberish,
    premium: BigNumberish
  ];
  export type OutputTuple = [
    target: string,
    initiator: string,
    asset: string,
    amount: bigint,
    premium: bigint
  ];
  export interface OutputObject {
    target: string;
    initiator: string;
    asset: string;
    amount: bigint;
    premium: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace KeeperUpdatedEvent {
  export type InputTuple = [newKeeper: AddressLike];
  export type OutputTuple = [newKeeper: string];
  export interface OutputObject {
    newKeeper: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LABDistributorUpdatedEvent {
  export type InputTuple = [newLABDistributor: AddressLike];
  export type OutputTuple = [newLABDistributor: string];
  export interface OutputObject {
    newLABDistributor: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LiquidationIncentiveUpdatedEvent {
  export type InputTuple = [newLiquidationIncentive: BigNumberish];
  export type OutputTuple = [newLiquidationIncentive: bigint];
  export interface OutputObject {
    newLiquidationIncentive: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MarketEnteredEvent {
  export type InputTuple = [gToken: AddressLike, account: AddressLike];
  export type OutputTuple = [gToken: string, account: string];
  export interface OutputObject {
    gToken: string;
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MarketExitedEvent {
  export type InputTuple = [gToken: AddressLike, account: AddressLike];
  export type OutputTuple = [gToken: string, account: string];
  export interface OutputObject {
    gToken: string;
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MarketListedEvent {
  export type InputTuple = [gToken: AddressLike];
  export type OutputTuple = [gToken: string];
  export interface OutputObject {
    gToken: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MarketRedeemEvent {
  export type InputTuple = [
    user: AddressLike,
    gToken: AddressLike,
    uAmount: BigNumberish
  ];
  export type OutputTuple = [user: string, gToken: string, uAmount: bigint];
  export interface OutputObject {
    user: string;
    gToken: string;
    uAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MarketSupplyEvent {
  export type InputTuple = [
    user: AddressLike,
    gToken: AddressLike,
    uAmount: BigNumberish
  ];
  export type OutputTuple = [user: string, gToken: string, uAmount: bigint];
  export interface OutputObject {
    user: string;
    gToken: string;
    uAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NftCoreUpdatedEvent {
  export type InputTuple = [newNftCore: AddressLike];
  export type OutputTuple = [newNftCore: string];
  export interface OutputObject {
    newNftCore: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RebateDistributorUpdatedEvent {
  export type InputTuple = [newRebateDistributor: AddressLike];
  export type OutputTuple = [newRebateDistributor: string];
  export interface OutputObject {
    newRebateDistributor: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SupplyCapUpdatedEvent {
  export type InputTuple = [gToken: AddressLike, newSupplyCap: BigNumberish];
  export type OutputTuple = [gToken: string, newSupplyCap: bigint];
  export interface OutputObject {
    gToken: string;
    newSupplyCap: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ValidatorUpdatedEvent {
  export type InputTuple = [newValidator: AddressLike];
  export type OutputTuple = [newValidator: string];
  export interface OutputObject {
    newValidator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface LineaBankCore extends BaseContract {
  connect(runner?: ContractRunner | null): LineaBankCore;
  waitForDeployment(): Promise<this>;

  interface: LineaBankCoreInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  accountLiquidityOf: TypedContractMethod<
    [account: AddressLike],
    [
      [bigint, bigint, bigint] & {
        collateralInUSD: bigint;
        supplyInUSD: bigint;
        borrowInUSD: bigint;
      }
    ],
    "view"
  >;

  allMarkets: TypedContractMethod<[], [string[]], "view">;

  borrow: TypedContractMethod<
    [gToken: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  checkMembership: TypedContractMethod<
    [account: AddressLike, gToken: AddressLike],
    [boolean],
    "view"
  >;

  "claimLab()": TypedContractMethod<[], [void], "nonpayable">;

  "claimLab(address)": TypedContractMethod<
    [market: AddressLike],
    [void],
    "nonpayable"
  >;

  closeFactor: TypedContractMethod<[], [bigint], "view">;

  compoundLab: TypedContractMethod<[], [void], "nonpayable">;

  enterMarkets: TypedContractMethod<
    [gTokens: AddressLike[]],
    [void],
    "nonpayable"
  >;

  exitMarket: TypedContractMethod<[gToken: AddressLike], [void], "nonpayable">;

  initialize: TypedContractMethod<
    [_priceCalculator: AddressLike],
    [void],
    "nonpayable"
  >;

  initialized: TypedContractMethod<[], [boolean], "view">;

  keeper: TypedContractMethod<[], [string], "view">;

  labDistributor: TypedContractMethod<[], [string], "view">;

  liquidateBorrow: TypedContractMethod<
    [
      gTokenBorrowed: AddressLike,
      gTokenCollateral: AddressLike,
      borrower: AddressLike,
      amount: BigNumberish
    ],
    [void],
    "payable"
  >;

  liquidationIncentive: TypedContractMethod<[], [bigint], "view">;

  listMarket: TypedContractMethod<
    [
      gToken: AddressLike,
      supplyCap: BigNumberish,
      borrowCap: BigNumberish,
      collateralFactor: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  marketInfoOf: TypedContractMethod<
    [gToken: AddressLike],
    [Constant.MarketInfoStructOutput],
    "view"
  >;

  marketInfos: TypedContractMethod<
    [arg0: AddressLike],
    [
      [boolean, bigint, bigint, bigint] & {
        isListed: boolean;
        supplyCap: bigint;
        borrowCap: bigint;
        collateralFactor: bigint;
      }
    ],
    "view"
  >;

  marketListOf: TypedContractMethod<[account: AddressLike], [string[]], "view">;

  marketListOfUsers: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  markets: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  nftBorrow: TypedContractMethod<
    [gToken: AddressLike, user: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  nftCore: TypedContractMethod<[], [string], "view">;

  nftRepayBorrow: TypedContractMethod<
    [gToken: AddressLike, user: AddressLike, amount: BigNumberish],
    [void],
    "payable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  priceCalculator: TypedContractMethod<[], [string], "view">;

  rebateDistributor: TypedContractMethod<[], [string], "view">;

  redeemToken: TypedContractMethod<
    [gToken: AddressLike, gAmount: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  redeemUnderlying: TypedContractMethod<
    [gToken: AddressLike, uAmount: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  removeMarket: TypedContractMethod<
    [gToken: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  repayBorrow: TypedContractMethod<
    [gToken: AddressLike, amount: BigNumberish],
    [void],
    "payable"
  >;

  repayBorrowBehalf: TypedContractMethod<
    [gToken: AddressLike, borrower: AddressLike, amount: BigNumberish],
    [void],
    "payable"
  >;

  setCloseFactor: TypedContractMethod<
    [newCloseFactor: BigNumberish],
    [void],
    "nonpayable"
  >;

  setCollateralFactor: TypedContractMethod<
    [gToken: AddressLike, newCollateralFactor: BigNumberish],
    [void],
    "nonpayable"
  >;

  setKeeper: TypedContractMethod<[_keeper: AddressLike], [void], "nonpayable">;

  setLABDistributor: TypedContractMethod<
    [_labDistributor: AddressLike],
    [void],
    "nonpayable"
  >;

  setLiquidationIncentive: TypedContractMethod<
    [newLiquidationIncentive: BigNumberish],
    [void],
    "nonpayable"
  >;

  setMarketBorrowCaps: TypedContractMethod<
    [gTokens: AddressLike[], newBorrowCaps: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  setMarketSupplyCaps: TypedContractMethod<
    [gTokens: AddressLike[], newSupplyCaps: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  setNftCore: TypedContractMethod<
    [_nftCore: AddressLike],
    [void],
    "nonpayable"
  >;

  setPriceCalculator: TypedContractMethod<
    [_priceCalculator: AddressLike],
    [void],
    "nonpayable"
  >;

  setRebateDistributor: TypedContractMethod<
    [_rebateDistributor: AddressLike],
    [void],
    "nonpayable"
  >;

  setValidator: TypedContractMethod<
    [_validator: AddressLike],
    [void],
    "nonpayable"
  >;

  supply: TypedContractMethod<
    [gToken: AddressLike, uAmount: BigNumberish],
    [bigint],
    "payable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  transferTokens: TypedContractMethod<
    [
      spender: AddressLike,
      src: AddressLike,
      dst: AddressLike,
      amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  usersOfMarket: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [boolean],
    "view"
  >;

  validator: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "accountLiquidityOf"
  ): TypedContractMethod<
    [account: AddressLike],
    [
      [bigint, bigint, bigint] & {
        collateralInUSD: bigint;
        supplyInUSD: bigint;
        borrowInUSD: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "allMarkets"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "borrow"
  ): TypedContractMethod<
    [gToken: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "checkMembership"
  ): TypedContractMethod<
    [account: AddressLike, gToken: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "claimLab()"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "claimLab(address)"
  ): TypedContractMethod<[market: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "closeFactor"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "compoundLab"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "enterMarkets"
  ): TypedContractMethod<[gTokens: AddressLike[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "exitMarket"
  ): TypedContractMethod<[gToken: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[_priceCalculator: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "initialized"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "keeper"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "labDistributor"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "liquidateBorrow"
  ): TypedContractMethod<
    [
      gTokenBorrowed: AddressLike,
      gTokenCollateral: AddressLike,
      borrower: AddressLike,
      amount: BigNumberish
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "liquidationIncentive"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "listMarket"
  ): TypedContractMethod<
    [
      gToken: AddressLike,
      supplyCap: BigNumberish,
      borrowCap: BigNumberish,
      collateralFactor: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "marketInfoOf"
  ): TypedContractMethod<
    [gToken: AddressLike],
    [Constant.MarketInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "marketInfos"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [boolean, bigint, bigint, bigint] & {
        isListed: boolean;
        supplyCap: bigint;
        borrowCap: bigint;
        collateralFactor: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "marketListOf"
  ): TypedContractMethod<[account: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "marketListOfUsers"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "markets"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "nftBorrow"
  ): TypedContractMethod<
    [gToken: AddressLike, user: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "nftCore"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "nftRepayBorrow"
  ): TypedContractMethod<
    [gToken: AddressLike, user: AddressLike, amount: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "priceCalculator"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "rebateDistributor"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "redeemToken"
  ): TypedContractMethod<
    [gToken: AddressLike, gAmount: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "redeemUnderlying"
  ): TypedContractMethod<
    [gToken: AddressLike, uAmount: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeMarket"
  ): TypedContractMethod<[gToken: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "repayBorrow"
  ): TypedContractMethod<
    [gToken: AddressLike, amount: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "repayBorrowBehalf"
  ): TypedContractMethod<
    [gToken: AddressLike, borrower: AddressLike, amount: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "setCloseFactor"
  ): TypedContractMethod<[newCloseFactor: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setCollateralFactor"
  ): TypedContractMethod<
    [gToken: AddressLike, newCollateralFactor: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setKeeper"
  ): TypedContractMethod<[_keeper: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setLABDistributor"
  ): TypedContractMethod<[_labDistributor: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setLiquidationIncentive"
  ): TypedContractMethod<
    [newLiquidationIncentive: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMarketBorrowCaps"
  ): TypedContractMethod<
    [gTokens: AddressLike[], newBorrowCaps: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMarketSupplyCaps"
  ): TypedContractMethod<
    [gTokens: AddressLike[], newSupplyCaps: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setNftCore"
  ): TypedContractMethod<[_nftCore: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPriceCalculator"
  ): TypedContractMethod<[_priceCalculator: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setRebateDistributor"
  ): TypedContractMethod<
    [_rebateDistributor: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setValidator"
  ): TypedContractMethod<[_validator: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "supply"
  ): TypedContractMethod<
    [gToken: AddressLike, uAmount: BigNumberish],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferTokens"
  ): TypedContractMethod<
    [
      spender: AddressLike,
      src: AddressLike,
      dst: AddressLike,
      amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "usersOfMarket"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "validator"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "BorrowCapUpdated"
  ): TypedContractEvent<
    BorrowCapUpdatedEvent.InputTuple,
    BorrowCapUpdatedEvent.OutputTuple,
    BorrowCapUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "CloseFactorUpdated"
  ): TypedContractEvent<
    CloseFactorUpdatedEvent.InputTuple,
    CloseFactorUpdatedEvent.OutputTuple,
    CloseFactorUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "CollateralFactorUpdated"
  ): TypedContractEvent<
    CollateralFactorUpdatedEvent.InputTuple,
    CollateralFactorUpdatedEvent.OutputTuple,
    CollateralFactorUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "FlashLoan"
  ): TypedContractEvent<
    FlashLoanEvent.InputTuple,
    FlashLoanEvent.OutputTuple,
    FlashLoanEvent.OutputObject
  >;
  getEvent(
    key: "KeeperUpdated"
  ): TypedContractEvent<
    KeeperUpdatedEvent.InputTuple,
    KeeperUpdatedEvent.OutputTuple,
    KeeperUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "LABDistributorUpdated"
  ): TypedContractEvent<
    LABDistributorUpdatedEvent.InputTuple,
    LABDistributorUpdatedEvent.OutputTuple,
    LABDistributorUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "LiquidationIncentiveUpdated"
  ): TypedContractEvent<
    LiquidationIncentiveUpdatedEvent.InputTuple,
    LiquidationIncentiveUpdatedEvent.OutputTuple,
    LiquidationIncentiveUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "MarketEntered"
  ): TypedContractEvent<
    MarketEnteredEvent.InputTuple,
    MarketEnteredEvent.OutputTuple,
    MarketEnteredEvent.OutputObject
  >;
  getEvent(
    key: "MarketExited"
  ): TypedContractEvent<
    MarketExitedEvent.InputTuple,
    MarketExitedEvent.OutputTuple,
    MarketExitedEvent.OutputObject
  >;
  getEvent(
    key: "MarketListed"
  ): TypedContractEvent<
    MarketListedEvent.InputTuple,
    MarketListedEvent.OutputTuple,
    MarketListedEvent.OutputObject
  >;
  getEvent(
    key: "MarketRedeem"
  ): TypedContractEvent<
    MarketRedeemEvent.InputTuple,
    MarketRedeemEvent.OutputTuple,
    MarketRedeemEvent.OutputObject
  >;
  getEvent(
    key: "MarketSupply"
  ): TypedContractEvent<
    MarketSupplyEvent.InputTuple,
    MarketSupplyEvent.OutputTuple,
    MarketSupplyEvent.OutputObject
  >;
  getEvent(
    key: "NftCoreUpdated"
  ): TypedContractEvent<
    NftCoreUpdatedEvent.InputTuple,
    NftCoreUpdatedEvent.OutputTuple,
    NftCoreUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "RebateDistributorUpdated"
  ): TypedContractEvent<
    RebateDistributorUpdatedEvent.InputTuple,
    RebateDistributorUpdatedEvent.OutputTuple,
    RebateDistributorUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "SupplyCapUpdated"
  ): TypedContractEvent<
    SupplyCapUpdatedEvent.InputTuple,
    SupplyCapUpdatedEvent.OutputTuple,
    SupplyCapUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;
  getEvent(
    key: "ValidatorUpdated"
  ): TypedContractEvent<
    ValidatorUpdatedEvent.InputTuple,
    ValidatorUpdatedEvent.OutputTuple,
    ValidatorUpdatedEvent.OutputObject
  >;

  filters: {
    "BorrowCapUpdated(address,uint256)": TypedContractEvent<
      BorrowCapUpdatedEvent.InputTuple,
      BorrowCapUpdatedEvent.OutputTuple,
      BorrowCapUpdatedEvent.OutputObject
    >;
    BorrowCapUpdated: TypedContractEvent<
      BorrowCapUpdatedEvent.InputTuple,
      BorrowCapUpdatedEvent.OutputTuple,
      BorrowCapUpdatedEvent.OutputObject
    >;

    "CloseFactorUpdated(uint256)": TypedContractEvent<
      CloseFactorUpdatedEvent.InputTuple,
      CloseFactorUpdatedEvent.OutputTuple,
      CloseFactorUpdatedEvent.OutputObject
    >;
    CloseFactorUpdated: TypedContractEvent<
      CloseFactorUpdatedEvent.InputTuple,
      CloseFactorUpdatedEvent.OutputTuple,
      CloseFactorUpdatedEvent.OutputObject
    >;

    "CollateralFactorUpdated(address,uint256)": TypedContractEvent<
      CollateralFactorUpdatedEvent.InputTuple,
      CollateralFactorUpdatedEvent.OutputTuple,
      CollateralFactorUpdatedEvent.OutputObject
    >;
    CollateralFactorUpdated: TypedContractEvent<
      CollateralFactorUpdatedEvent.InputTuple,
      CollateralFactorUpdatedEvent.OutputTuple,
      CollateralFactorUpdatedEvent.OutputObject
    >;

    "FlashLoan(address,address,address,uint256,uint256)": TypedContractEvent<
      FlashLoanEvent.InputTuple,
      FlashLoanEvent.OutputTuple,
      FlashLoanEvent.OutputObject
    >;
    FlashLoan: TypedContractEvent<
      FlashLoanEvent.InputTuple,
      FlashLoanEvent.OutputTuple,
      FlashLoanEvent.OutputObject
    >;

    "KeeperUpdated(address)": TypedContractEvent<
      KeeperUpdatedEvent.InputTuple,
      KeeperUpdatedEvent.OutputTuple,
      KeeperUpdatedEvent.OutputObject
    >;
    KeeperUpdated: TypedContractEvent<
      KeeperUpdatedEvent.InputTuple,
      KeeperUpdatedEvent.OutputTuple,
      KeeperUpdatedEvent.OutputObject
    >;

    "LABDistributorUpdated(address)": TypedContractEvent<
      LABDistributorUpdatedEvent.InputTuple,
      LABDistributorUpdatedEvent.OutputTuple,
      LABDistributorUpdatedEvent.OutputObject
    >;
    LABDistributorUpdated: TypedContractEvent<
      LABDistributorUpdatedEvent.InputTuple,
      LABDistributorUpdatedEvent.OutputTuple,
      LABDistributorUpdatedEvent.OutputObject
    >;

    "LiquidationIncentiveUpdated(uint256)": TypedContractEvent<
      LiquidationIncentiveUpdatedEvent.InputTuple,
      LiquidationIncentiveUpdatedEvent.OutputTuple,
      LiquidationIncentiveUpdatedEvent.OutputObject
    >;
    LiquidationIncentiveUpdated: TypedContractEvent<
      LiquidationIncentiveUpdatedEvent.InputTuple,
      LiquidationIncentiveUpdatedEvent.OutputTuple,
      LiquidationIncentiveUpdatedEvent.OutputObject
    >;

    "MarketEntered(address,address)": TypedContractEvent<
      MarketEnteredEvent.InputTuple,
      MarketEnteredEvent.OutputTuple,
      MarketEnteredEvent.OutputObject
    >;
    MarketEntered: TypedContractEvent<
      MarketEnteredEvent.InputTuple,
      MarketEnteredEvent.OutputTuple,
      MarketEnteredEvent.OutputObject
    >;

    "MarketExited(address,address)": TypedContractEvent<
      MarketExitedEvent.InputTuple,
      MarketExitedEvent.OutputTuple,
      MarketExitedEvent.OutputObject
    >;
    MarketExited: TypedContractEvent<
      MarketExitedEvent.InputTuple,
      MarketExitedEvent.OutputTuple,
      MarketExitedEvent.OutputObject
    >;

    "MarketListed(address)": TypedContractEvent<
      MarketListedEvent.InputTuple,
      MarketListedEvent.OutputTuple,
      MarketListedEvent.OutputObject
    >;
    MarketListed: TypedContractEvent<
      MarketListedEvent.InputTuple,
      MarketListedEvent.OutputTuple,
      MarketListedEvent.OutputObject
    >;

    "MarketRedeem(address,address,uint256)": TypedContractEvent<
      MarketRedeemEvent.InputTuple,
      MarketRedeemEvent.OutputTuple,
      MarketRedeemEvent.OutputObject
    >;
    MarketRedeem: TypedContractEvent<
      MarketRedeemEvent.InputTuple,
      MarketRedeemEvent.OutputTuple,
      MarketRedeemEvent.OutputObject
    >;

    "MarketSupply(address,address,uint256)": TypedContractEvent<
      MarketSupplyEvent.InputTuple,
      MarketSupplyEvent.OutputTuple,
      MarketSupplyEvent.OutputObject
    >;
    MarketSupply: TypedContractEvent<
      MarketSupplyEvent.InputTuple,
      MarketSupplyEvent.OutputTuple,
      MarketSupplyEvent.OutputObject
    >;

    "NftCoreUpdated(address)": TypedContractEvent<
      NftCoreUpdatedEvent.InputTuple,
      NftCoreUpdatedEvent.OutputTuple,
      NftCoreUpdatedEvent.OutputObject
    >;
    NftCoreUpdated: TypedContractEvent<
      NftCoreUpdatedEvent.InputTuple,
      NftCoreUpdatedEvent.OutputTuple,
      NftCoreUpdatedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "RebateDistributorUpdated(address)": TypedContractEvent<
      RebateDistributorUpdatedEvent.InputTuple,
      RebateDistributorUpdatedEvent.OutputTuple,
      RebateDistributorUpdatedEvent.OutputObject
    >;
    RebateDistributorUpdated: TypedContractEvent<
      RebateDistributorUpdatedEvent.InputTuple,
      RebateDistributorUpdatedEvent.OutputTuple,
      RebateDistributorUpdatedEvent.OutputObject
    >;

    "SupplyCapUpdated(address,uint256)": TypedContractEvent<
      SupplyCapUpdatedEvent.InputTuple,
      SupplyCapUpdatedEvent.OutputTuple,
      SupplyCapUpdatedEvent.OutputObject
    >;
    SupplyCapUpdated: TypedContractEvent<
      SupplyCapUpdatedEvent.InputTuple,
      SupplyCapUpdatedEvent.OutputTuple,
      SupplyCapUpdatedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;

    "ValidatorUpdated(address)": TypedContractEvent<
      ValidatorUpdatedEvent.InputTuple,
      ValidatorUpdatedEvent.OutputTuple,
      ValidatorUpdatedEvent.OutputObject
    >;
    ValidatorUpdated: TypedContractEvent<
      ValidatorUpdatedEvent.InputTuple,
      ValidatorUpdatedEvent.OutputTuple,
      ValidatorUpdatedEvent.OutputObject
    >;
  };
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface VelocoreFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "deploy"
      | "getPools"
      | "isPool"
      | "poolList"
      | "pools"
      | "poolsLength"
      | "setDecay"
      | "setFee"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "PoolCreated"): EventFragment;

  encodeFunctionData(
    functionFragment: "deploy",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPools",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "isPool", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "poolList",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pools",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "poolsLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setDecay",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFee",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "deploy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getPools", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "poolList", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pools", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "poolsLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setDecay", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setFee", data: BytesLike): Result;
}

export namespace PoolCreatedEvent {
  export type InputTuple = [pool: AddressLike, t1: BytesLike, t2: BytesLike];
  export type OutputTuple = [pool: string, t1: string, t2: string];
  export interface OutputObject {
    pool: string;
    t1: string;
    t2: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface VelocoreFactory extends BaseContract {
  connect(runner?: ContractRunner | null): VelocoreFactory;
  waitForDeployment(): Promise<this>;

  interface: VelocoreFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  deploy: TypedContractMethod<
    [quoteToken: BytesLike, baseToken: BytesLike],
    [string],
    "nonpayable"
  >;

  getPools: TypedContractMethod<
    [begin: BigNumberish, maxLength: BigNumberish],
    [string[]],
    "view"
  >;

  isPool: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  poolList: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  pools: TypedContractMethod<
    [arg0: BytesLike, arg1: BytesLike],
    [string],
    "view"
  >;

  poolsLength: TypedContractMethod<[], [bigint], "view">;

  setDecay: TypedContractMethod<[decay_: BigNumberish], [void], "nonpayable">;

  setFee: TypedContractMethod<[fee1e9_: BigNumberish], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "deploy"
  ): TypedContractMethod<
    [quoteToken: BytesLike, baseToken: BytesLike],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getPools"
  ): TypedContractMethod<
    [begin: BigNumberish, maxLength: BigNumberish],
    [string[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "isPool"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "poolList"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "pools"
  ): TypedContractMethod<[arg0: BytesLike, arg1: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "poolsLength"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "setDecay"
  ): TypedContractMethod<[decay_: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setFee"
  ): TypedContractMethod<[fee1e9_: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "PoolCreated"
  ): TypedContractEvent<
    PoolCreatedEvent.InputTuple,
    PoolCreatedEvent.OutputTuple,
    PoolCreatedEvent.OutputObject
  >;

  filters: {
    "PoolCreated(address,bytes32,bytes32)": TypedContractEvent<
      PoolCreatedEvent.InputTuple,
      PoolCreatedEvent.OutputTuple,
      PoolCreatedEvent.OutputObject
    >;
    PoolCreated: TypedContractEvent<
      PoolCreatedEvent.InputTuple,
      PoolCreatedEvent.OutputTuple,
      PoolCreatedEvent.OutputObject
    >;
  };
}

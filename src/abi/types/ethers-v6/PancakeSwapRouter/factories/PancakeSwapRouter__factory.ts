/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  PancakeSwapRouter,
  PancakeSwapRouterInterface,
} from "../PancakeSwapRouter";

const _abi = [
  {
    type: "function",
    name: "exactInputSingle",
    constant: false,
    stateMutability: "payable",
    payable: true,
    inputs: [
      {
        type: "tuple",
        name: "params",
        components: [
          {
            type: "address",
            name: "tokenIn",
          },
          {
            type: "address",
            name: "tokenOut",
          },
          {
            type: "uint24",
            name: "fee",
          },
          {
            type: "address",
            name: "recipient",
          },
          {
            type: "uint256",
            name: "amountIn",
          },
          {
            type: "uint256",
            name: "amountOutMinimum",
          },
          {
            type: "uint160",
            name: "sqrtPriceLimitX96",
          },
        ],
      },
    ],
    outputs: [
      {
        type: "uint256",
        name: "amountOut",
      },
    ],
  },
  {
    type: "function",
    name: "multicall",
    constant: false,
    stateMutability: "payable",
    payable: true,
    inputs: [
      {
        type: "uint256",
        name: "deadline",
      },
      {
        type: "bytes[]",
        name: "data",
      },
    ],
    outputs: [
      {
        type: "bytes[]",
        name: "",
      },
    ],
  },
  {
    type: "function",
    name: "unwrapWETH9",
    constant: false,
    payable: false,
    inputs: [
      {
        type: "uint256",
        name: "amountMinimum",
      },
      {
        type: "address",
        name: "recipient",
      },
    ],
    outputs: [],
  },
] as const;

export class PancakeSwapRouter__factory {
  static readonly abi = _abi;
  static createInterface(): PancakeSwapRouterInterface {
    return new Interface(_abi) as PancakeSwapRouterInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): PancakeSwapRouter {
    return new Contract(address, _abi, runner) as unknown as PancakeSwapRouter;
  }
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type FeeAmountEnabled = ContractEventLog<{
  fee: string;
  tickSpacing: string;
  0: string;
  1: string;
}>;
export type FeeAmountExtraInfoUpdated = ContractEventLog<{
  fee: string;
  whitelistRequested: boolean;
  enabled: boolean;
  0: string;
  1: boolean;
  2: boolean;
}>;
export type OwnerChanged = ContractEventLog<{
  oldOwner: string;
  newOwner: string;
  0: string;
  1: string;
}>;
export type PoolCreated = ContractEventLog<{
  token0: string;
  token1: string;
  fee: string;
  tickSpacing: string;
  pool: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
}>;
export type SetLmPoolDeployer = ContractEventLog<{
  lmPoolDeployer: string;
  0: string;
}>;
export type WhiteListAdded = ContractEventLog<{
  user: string;
  verified: boolean;
  0: string;
  1: boolean;
}>;

export interface PANCAKE_FACTORY extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): PANCAKE_FACTORY;
  clone(): PANCAKE_FACTORY;
  methods: {
    collectProtocol(
      pool: string,
      recipient: string,
      amount0Requested: number | string | BN,
      amount1Requested: number | string | BN
    ): NonPayableTransactionObject<{
      amount0: string;
      amount1: string;
      0: string;
      1: string;
    }>;

    createPool(
      tokenA: string,
      tokenB: string,
      fee: number | string | BN
    ): NonPayableTransactionObject<string>;

    enableFeeAmount(
      fee: number | string | BN,
      tickSpacing: number | string | BN
    ): NonPayableTransactionObject<void>;

    feeAmountTickSpacing(
      arg0: number | string | BN
    ): NonPayableTransactionObject<string>;

    feeAmountTickSpacingExtraInfo(
      arg0: number | string | BN
    ): NonPayableTransactionObject<{
      whitelistRequested: boolean;
      enabled: boolean;
      0: boolean;
      1: boolean;
    }>;

    getPool(
      arg0: string,
      arg1: string,
      arg2: number | string | BN
    ): NonPayableTransactionObject<string>;

    lmPoolDeployer(): NonPayableTransactionObject<string>;

    owner(): NonPayableTransactionObject<string>;

    poolDeployer(): NonPayableTransactionObject<string>;

    setFeeAmountExtraInfo(
      fee: number | string | BN,
      whitelistRequested: boolean,
      enabled: boolean
    ): NonPayableTransactionObject<void>;

    setFeeProtocol(
      pool: string,
      feeProtocol0: number | string | BN,
      feeProtocol1: number | string | BN
    ): NonPayableTransactionObject<void>;

    setLmPool(pool: string, lmPool: string): NonPayableTransactionObject<void>;

    setLmPoolDeployer(
      _lmPoolDeployer: string
    ): NonPayableTransactionObject<void>;

    setOwner(_owner: string): NonPayableTransactionObject<void>;

    setWhiteListAddress(
      user: string,
      verified: boolean
    ): NonPayableTransactionObject<void>;
  };
  events: {
    FeeAmountEnabled(cb?: Callback<FeeAmountEnabled>): EventEmitter;
    FeeAmountEnabled(
      options?: EventOptions,
      cb?: Callback<FeeAmountEnabled>
    ): EventEmitter;

    FeeAmountExtraInfoUpdated(
      cb?: Callback<FeeAmountExtraInfoUpdated>
    ): EventEmitter;
    FeeAmountExtraInfoUpdated(
      options?: EventOptions,
      cb?: Callback<FeeAmountExtraInfoUpdated>
    ): EventEmitter;

    OwnerChanged(cb?: Callback<OwnerChanged>): EventEmitter;
    OwnerChanged(
      options?: EventOptions,
      cb?: Callback<OwnerChanged>
    ): EventEmitter;

    PoolCreated(cb?: Callback<PoolCreated>): EventEmitter;
    PoolCreated(
      options?: EventOptions,
      cb?: Callback<PoolCreated>
    ): EventEmitter;

    SetLmPoolDeployer(cb?: Callback<SetLmPoolDeployer>): EventEmitter;
    SetLmPoolDeployer(
      options?: EventOptions,
      cb?: Callback<SetLmPoolDeployer>
    ): EventEmitter;

    WhiteListAdded(cb?: Callback<WhiteListAdded>): EventEmitter;
    WhiteListAdded(
      options?: EventOptions,
      cb?: Callback<WhiteListAdded>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "FeeAmountEnabled", cb: Callback<FeeAmountEnabled>): void;
  once(
    event: "FeeAmountEnabled",
    options: EventOptions,
    cb: Callback<FeeAmountEnabled>
  ): void;

  once(
    event: "FeeAmountExtraInfoUpdated",
    cb: Callback<FeeAmountExtraInfoUpdated>
  ): void;
  once(
    event: "FeeAmountExtraInfoUpdated",
    options: EventOptions,
    cb: Callback<FeeAmountExtraInfoUpdated>
  ): void;

  once(event: "OwnerChanged", cb: Callback<OwnerChanged>): void;
  once(
    event: "OwnerChanged",
    options: EventOptions,
    cb: Callback<OwnerChanged>
  ): void;

  once(event: "PoolCreated", cb: Callback<PoolCreated>): void;
  once(
    event: "PoolCreated",
    options: EventOptions,
    cb: Callback<PoolCreated>
  ): void;

  once(event: "SetLmPoolDeployer", cb: Callback<SetLmPoolDeployer>): void;
  once(
    event: "SetLmPoolDeployer",
    options: EventOptions,
    cb: Callback<SetLmPoolDeployer>
  ): void;

  once(event: "WhiteListAdded", cb: Callback<WhiteListAdded>): void;
  once(
    event: "WhiteListAdded",
    options: EventOptions,
    cb: Callback<WhiteListAdded>
  ): void;
}

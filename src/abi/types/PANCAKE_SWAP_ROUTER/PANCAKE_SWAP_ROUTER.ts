/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type OwnershipTransferred = ContractEventLog<{
  previousOwner: string;
  newOwner: string;
  0: string;
  1: string;
}>;
export type SetStableSwap = ContractEventLog<{
  factory: string;
  info: string;
  0: string;
  1: string;
}>;

export interface PANCAKE_SWAP_ROUTER extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): PANCAKE_SWAP_ROUTER;
  clone(): PANCAKE_SWAP_ROUTER;
  methods: {
    WETH9(): NonPayableTransactionObject<string>;

    approveMax(token: string): PayableTransactionObject<void>;

    approveMaxMinusOne(token: string): PayableTransactionObject<void>;

    approveZeroThenMax(token: string): PayableTransactionObject<void>;

    approveZeroThenMaxMinusOne(token: string): PayableTransactionObject<void>;

    callPositionManager(
      data: string | number[]
    ): PayableTransactionObject<string>;

    "checkOracleSlippage(bytes[],uint128[],uint24,uint32)"(
      paths: (string | number[])[],
      amounts: (number | string | BN)[],
      maximumTickDivergence: number | string | BN,
      secondsAgo: number | string | BN
    ): NonPayableTransactionObject<void>;

    "checkOracleSlippage(bytes,uint24,uint32)"(
      path: string | number[],
      maximumTickDivergence: number | string | BN,
      secondsAgo: number | string | BN
    ): NonPayableTransactionObject<void>;

    deployer(): NonPayableTransactionObject<string>;

    exactInput(
      params: [
        string | number[],
        string,
        number | string | BN,
        number | string | BN
      ]
    ): PayableTransactionObject<string>;

    exactInputSingle(
      params: [
        string,
        string,
        number | string | BN,
        string,
        number | string | BN,
        number | string | BN,
        number | string | BN
      ]
    ): PayableTransactionObject<string>;

    exactInputStableSwap(
      path: string[],
      flag: (number | string | BN)[],
      amountIn: number | string | BN,
      amountOutMin: number | string | BN,
      to: string
    ): PayableTransactionObject<string>;

    exactOutput(
      params: [
        string | number[],
        string,
        number | string | BN,
        number | string | BN
      ]
    ): PayableTransactionObject<string>;

    exactOutputSingle(
      params: [
        string,
        string,
        number | string | BN,
        string,
        number | string | BN,
        number | string | BN,
        number | string | BN
      ]
    ): PayableTransactionObject<string>;

    exactOutputStableSwap(
      path: string[],
      flag: (number | string | BN)[],
      amountOut: number | string | BN,
      amountInMax: number | string | BN,
      to: string
    ): PayableTransactionObject<string>;

    factory(): NonPayableTransactionObject<string>;

    factoryV2(): NonPayableTransactionObject<string>;

    getApprovalType(
      token: string,
      amount: number | string | BN
    ): NonPayableTransactionObject<string>;

    increaseLiquidity(
      params: [
        string,
        string,
        number | string | BN,
        number | string | BN,
        number | string | BN
      ]
    ): PayableTransactionObject<string>;

    mint(
      params: [
        string,
        string,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        string
      ]
    ): PayableTransactionObject<string>;

    "multicall(bytes32,bytes[])"(
      previousBlockhash: string | number[],
      data: (string | number[])[]
    ): PayableTransactionObject<string[]>;

    "multicall(uint256,bytes[])"(
      deadline: number | string | BN,
      data: (string | number[])[]
    ): PayableTransactionObject<string[]>;

    "multicall(bytes[])"(
      data: (string | number[])[]
    ): PayableTransactionObject<string[]>;

    owner(): NonPayableTransactionObject<string>;

    pancakeV3SwapCallback(
      amount0Delta: number | string | BN,
      amount1Delta: number | string | BN,
      _data: string | number[]
    ): NonPayableTransactionObject<void>;

    positionManager(): NonPayableTransactionObject<string>;

    pull(
      token: string,
      value: number | string | BN
    ): PayableTransactionObject<void>;

    refundETH(): PayableTransactionObject<void>;

    renounceOwnership(): NonPayableTransactionObject<void>;

    selfPermit(
      token: string,
      value: number | string | BN,
      deadline: number | string | BN,
      v: number | string | BN,
      r: string | number[],
      s: string | number[]
    ): PayableTransactionObject<void>;

    selfPermitAllowed(
      token: string,
      nonce: number | string | BN,
      expiry: number | string | BN,
      v: number | string | BN,
      r: string | number[],
      s: string | number[]
    ): PayableTransactionObject<void>;

    selfPermitAllowedIfNecessary(
      token: string,
      nonce: number | string | BN,
      expiry: number | string | BN,
      v: number | string | BN,
      r: string | number[],
      s: string | number[]
    ): PayableTransactionObject<void>;

    selfPermitIfNecessary(
      token: string,
      value: number | string | BN,
      deadline: number | string | BN,
      v: number | string | BN,
      r: string | number[],
      s: string | number[]
    ): PayableTransactionObject<void>;

    setStableSwap(
      _factory: string,
      _info: string
    ): NonPayableTransactionObject<void>;

    stableSwapFactory(): NonPayableTransactionObject<string>;

    stableSwapInfo(): NonPayableTransactionObject<string>;

    swapExactTokensForTokens(
      amountIn: number | string | BN,
      amountOutMin: number | string | BN,
      path: string[],
      to: string
    ): PayableTransactionObject<string>;

    swapTokensForExactTokens(
      amountOut: number | string | BN,
      amountInMax: number | string | BN,
      path: string[],
      to: string
    ): PayableTransactionObject<string>;

    "sweepToken(address,uint256,address)"(
      token: string,
      amountMinimum: number | string | BN,
      recipient: string
    ): PayableTransactionObject<void>;

    "sweepToken(address,uint256)"(
      token: string,
      amountMinimum: number | string | BN
    ): PayableTransactionObject<void>;

    "sweepTokenWithFee(address,uint256,uint256,address)"(
      token: string,
      amountMinimum: number | string | BN,
      feeBips: number | string | BN,
      feeRecipient: string
    ): PayableTransactionObject<void>;

    "sweepTokenWithFee(address,uint256,address,uint256,address)"(
      token: string,
      amountMinimum: number | string | BN,
      recipient: string,
      feeBips: number | string | BN,
      feeRecipient: string
    ): PayableTransactionObject<void>;

    transferOwnership(newOwner: string): NonPayableTransactionObject<void>;

    unwrapWETH9(
      amountMinimum: number | string | BN,
      recipient: string
    ): PayableTransactionObject<void>;

    "unwrapWETH9WithFee(uint256,address,uint256,address)"(
      amountMinimum: number | string | BN,
      recipient: string,
      feeBips: number | string | BN,
      feeRecipient: string
    ): PayableTransactionObject<void>;

    "unwrapWETH9WithFee(uint256,uint256,address)"(
      amountMinimum: number | string | BN,
      feeBips: number | string | BN,
      feeRecipient: string
    ): PayableTransactionObject<void>;

    wrapETH(value: number | string | BN): PayableTransactionObject<void>;
  };
  events: {
    OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter;
    OwnershipTransferred(
      options?: EventOptions,
      cb?: Callback<OwnershipTransferred>
    ): EventEmitter;

    SetStableSwap(cb?: Callback<SetStableSwap>): EventEmitter;
    SetStableSwap(
      options?: EventOptions,
      cb?: Callback<SetStableSwap>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "OwnershipTransferred", cb: Callback<OwnershipTransferred>): void;
  once(
    event: "OwnershipTransferred",
    options: EventOptions,
    cb: Callback<OwnershipTransferred>
  ): void;

  once(event: "SetStableSwap", cb: Callback<SetStableSwap>): void;
  once(
    event: "SetStableSwap",
    options: EventOptions,
    cb: Callback<SetStableSwap>
  ): void;
}

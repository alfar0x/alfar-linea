/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type BorrowCapUpdated = ContractEventLog<{
  gToken: string;
  newBorrowCap: string;
  0: string;
  1: string;
}>;
export type CloseFactorUpdated = ContractEventLog<{
  newCloseFactor: string;
  0: string;
}>;
export type CollateralFactorUpdated = ContractEventLog<{
  gToken: string;
  newCollateralFactor: string;
  0: string;
  1: string;
}>;
export type FlashLoan = ContractEventLog<{
  target: string;
  initiator: string;
  asset: string;
  amount: string;
  premium: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
}>;
export type KeeperUpdated = ContractEventLog<{
  newKeeper: string;
  0: string;
}>;
export type LABDistributorUpdated = ContractEventLog<{
  newLABDistributor: string;
  0: string;
}>;
export type LiquidationIncentiveUpdated = ContractEventLog<{
  newLiquidationIncentive: string;
  0: string;
}>;
export type MarketEntered = ContractEventLog<{
  gToken: string;
  account: string;
  0: string;
  1: string;
}>;
export type MarketExited = ContractEventLog<{
  gToken: string;
  account: string;
  0: string;
  1: string;
}>;
export type MarketListed = ContractEventLog<{
  gToken: string;
  0: string;
}>;
export type MarketRedeem = ContractEventLog<{
  user: string;
  gToken: string;
  uAmount: string;
  0: string;
  1: string;
  2: string;
}>;
export type MarketSupply = ContractEventLog<{
  user: string;
  gToken: string;
  uAmount: string;
  0: string;
  1: string;
  2: string;
}>;
export type NftCoreUpdated = ContractEventLog<{
  newNftCore: string;
  0: string;
}>;
export type OwnershipTransferred = ContractEventLog<{
  previousOwner: string;
  newOwner: string;
  0: string;
  1: string;
}>;
export type Paused = ContractEventLog<{
  account: string;
  0: string;
}>;
export type RebateDistributorUpdated = ContractEventLog<{
  newRebateDistributor: string;
  0: string;
}>;
export type SupplyCapUpdated = ContractEventLog<{
  gToken: string;
  newSupplyCap: string;
  0: string;
  1: string;
}>;
export type Unpaused = ContractEventLog<{
  account: string;
  0: string;
}>;
export type ValidatorUpdated = ContractEventLog<{
  newValidator: string;
  0: string;
}>;

export interface LINEA_BANK_CORE extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): LINEA_BANK_CORE;
  clone(): LINEA_BANK_CORE;
  methods: {
    accountLiquidityOf(account: string): NonPayableTransactionObject<{
      collateralInUSD: string;
      supplyInUSD: string;
      borrowInUSD: string;
      0: string;
      1: string;
      2: string;
    }>;

    allMarkets(): NonPayableTransactionObject<string[]>;

    borrow(
      gToken: string,
      amount: number | string | BN
    ): NonPayableTransactionObject<void>;

    checkMembership(
      account: string,
      gToken: string
    ): NonPayableTransactionObject<boolean>;

    "claimLab()"(): NonPayableTransactionObject<void>;

    "claimLab(address)"(market: string): NonPayableTransactionObject<void>;

    closeFactor(): NonPayableTransactionObject<string>;

    compoundLab(): NonPayableTransactionObject<void>;

    enterMarkets(gTokens: string[]): NonPayableTransactionObject<void>;

    exitMarket(gToken: string): NonPayableTransactionObject<void>;

    initialize(_priceCalculator: string): NonPayableTransactionObject<void>;

    initialized(): NonPayableTransactionObject<boolean>;

    keeper(): NonPayableTransactionObject<string>;

    labDistributor(): NonPayableTransactionObject<string>;

    liquidateBorrow(
      gTokenBorrowed: string,
      gTokenCollateral: string,
      borrower: string,
      amount: number | string | BN
    ): PayableTransactionObject<void>;

    liquidationIncentive(): NonPayableTransactionObject<string>;

    listMarket(
      gToken: string,
      supplyCap: number | string | BN,
      borrowCap: number | string | BN,
      collateralFactor: number | string | BN
    ): NonPayableTransactionObject<void>;

    marketInfoOf(
      gToken: string
    ): NonPayableTransactionObject<[boolean, string, string, string]>;

    marketInfos(arg0: string): NonPayableTransactionObject<{
      isListed: boolean;
      supplyCap: string;
      borrowCap: string;
      collateralFactor: string;
      0: boolean;
      1: string;
      2: string;
      3: string;
    }>;

    marketListOf(account: string): NonPayableTransactionObject<string[]>;

    marketListOfUsers(
      arg0: string,
      arg1: number | string | BN
    ): NonPayableTransactionObject<string>;

    markets(arg0: number | string | BN): NonPayableTransactionObject<string>;

    nftBorrow(
      gToken: string,
      user: string,
      amount: number | string | BN
    ): NonPayableTransactionObject<void>;

    nftCore(): NonPayableTransactionObject<string>;

    nftRepayBorrow(
      gToken: string,
      user: string,
      amount: number | string | BN
    ): PayableTransactionObject<void>;

    owner(): NonPayableTransactionObject<string>;

    pause(): NonPayableTransactionObject<void>;

    paused(): NonPayableTransactionObject<boolean>;

    priceCalculator(): NonPayableTransactionObject<string>;

    rebateDistributor(): NonPayableTransactionObject<string>;

    redeemToken(
      gToken: string,
      gAmount: number | string | BN
    ): NonPayableTransactionObject<string>;

    redeemUnderlying(
      gToken: string,
      uAmount: number | string | BN
    ): NonPayableTransactionObject<string>;

    removeMarket(gToken: string): NonPayableTransactionObject<void>;

    renounceOwnership(): NonPayableTransactionObject<void>;

    repayBorrow(
      gToken: string,
      amount: number | string | BN
    ): PayableTransactionObject<void>;

    repayBorrowBehalf(
      gToken: string,
      borrower: string,
      amount: number | string | BN
    ): PayableTransactionObject<void>;

    setCloseFactor(
      newCloseFactor: number | string | BN
    ): NonPayableTransactionObject<void>;

    setCollateralFactor(
      gToken: string,
      newCollateralFactor: number | string | BN
    ): NonPayableTransactionObject<void>;

    setKeeper(_keeper: string): NonPayableTransactionObject<void>;

    setLABDistributor(
      _labDistributor: string
    ): NonPayableTransactionObject<void>;

    setLiquidationIncentive(
      newLiquidationIncentive: number | string | BN
    ): NonPayableTransactionObject<void>;

    setMarketBorrowCaps(
      gTokens: string[],
      newBorrowCaps: (number | string | BN)[]
    ): NonPayableTransactionObject<void>;

    setMarketSupplyCaps(
      gTokens: string[],
      newSupplyCaps: (number | string | BN)[]
    ): NonPayableTransactionObject<void>;

    setNftCore(_nftCore: string): NonPayableTransactionObject<void>;

    setPriceCalculator(
      _priceCalculator: string
    ): NonPayableTransactionObject<void>;

    setRebateDistributor(
      _rebateDistributor: string
    ): NonPayableTransactionObject<void>;

    setValidator(_validator: string): NonPayableTransactionObject<void>;

    supply(
      gToken: string,
      uAmount: number | string | BN
    ): PayableTransactionObject<string>;

    transferOwnership(newOwner: string): NonPayableTransactionObject<void>;

    transferTokens(
      spender: string,
      src: string,
      dst: string,
      amount: number | string | BN
    ): NonPayableTransactionObject<void>;

    unpause(): NonPayableTransactionObject<void>;

    usersOfMarket(
      arg0: string,
      arg1: string
    ): NonPayableTransactionObject<boolean>;

    validator(): NonPayableTransactionObject<string>;
  };
  events: {
    BorrowCapUpdated(cb?: Callback<BorrowCapUpdated>): EventEmitter;
    BorrowCapUpdated(
      options?: EventOptions,
      cb?: Callback<BorrowCapUpdated>
    ): EventEmitter;

    CloseFactorUpdated(cb?: Callback<CloseFactorUpdated>): EventEmitter;
    CloseFactorUpdated(
      options?: EventOptions,
      cb?: Callback<CloseFactorUpdated>
    ): EventEmitter;

    CollateralFactorUpdated(
      cb?: Callback<CollateralFactorUpdated>
    ): EventEmitter;
    CollateralFactorUpdated(
      options?: EventOptions,
      cb?: Callback<CollateralFactorUpdated>
    ): EventEmitter;

    FlashLoan(cb?: Callback<FlashLoan>): EventEmitter;
    FlashLoan(options?: EventOptions, cb?: Callback<FlashLoan>): EventEmitter;

    KeeperUpdated(cb?: Callback<KeeperUpdated>): EventEmitter;
    KeeperUpdated(
      options?: EventOptions,
      cb?: Callback<KeeperUpdated>
    ): EventEmitter;

    LABDistributorUpdated(cb?: Callback<LABDistributorUpdated>): EventEmitter;
    LABDistributorUpdated(
      options?: EventOptions,
      cb?: Callback<LABDistributorUpdated>
    ): EventEmitter;

    LiquidationIncentiveUpdated(
      cb?: Callback<LiquidationIncentiveUpdated>
    ): EventEmitter;
    LiquidationIncentiveUpdated(
      options?: EventOptions,
      cb?: Callback<LiquidationIncentiveUpdated>
    ): EventEmitter;

    MarketEntered(cb?: Callback<MarketEntered>): EventEmitter;
    MarketEntered(
      options?: EventOptions,
      cb?: Callback<MarketEntered>
    ): EventEmitter;

    MarketExited(cb?: Callback<MarketExited>): EventEmitter;
    MarketExited(
      options?: EventOptions,
      cb?: Callback<MarketExited>
    ): EventEmitter;

    MarketListed(cb?: Callback<MarketListed>): EventEmitter;
    MarketListed(
      options?: EventOptions,
      cb?: Callback<MarketListed>
    ): EventEmitter;

    MarketRedeem(cb?: Callback<MarketRedeem>): EventEmitter;
    MarketRedeem(
      options?: EventOptions,
      cb?: Callback<MarketRedeem>
    ): EventEmitter;

    MarketSupply(cb?: Callback<MarketSupply>): EventEmitter;
    MarketSupply(
      options?: EventOptions,
      cb?: Callback<MarketSupply>
    ): EventEmitter;

    NftCoreUpdated(cb?: Callback<NftCoreUpdated>): EventEmitter;
    NftCoreUpdated(
      options?: EventOptions,
      cb?: Callback<NftCoreUpdated>
    ): EventEmitter;

    OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter;
    OwnershipTransferred(
      options?: EventOptions,
      cb?: Callback<OwnershipTransferred>
    ): EventEmitter;

    Paused(cb?: Callback<Paused>): EventEmitter;
    Paused(options?: EventOptions, cb?: Callback<Paused>): EventEmitter;

    RebateDistributorUpdated(
      cb?: Callback<RebateDistributorUpdated>
    ): EventEmitter;
    RebateDistributorUpdated(
      options?: EventOptions,
      cb?: Callback<RebateDistributorUpdated>
    ): EventEmitter;

    SupplyCapUpdated(cb?: Callback<SupplyCapUpdated>): EventEmitter;
    SupplyCapUpdated(
      options?: EventOptions,
      cb?: Callback<SupplyCapUpdated>
    ): EventEmitter;

    Unpaused(cb?: Callback<Unpaused>): EventEmitter;
    Unpaused(options?: EventOptions, cb?: Callback<Unpaused>): EventEmitter;

    ValidatorUpdated(cb?: Callback<ValidatorUpdated>): EventEmitter;
    ValidatorUpdated(
      options?: EventOptions,
      cb?: Callback<ValidatorUpdated>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "BorrowCapUpdated", cb: Callback<BorrowCapUpdated>): void;
  once(
    event: "BorrowCapUpdated",
    options: EventOptions,
    cb: Callback<BorrowCapUpdated>
  ): void;

  once(event: "CloseFactorUpdated", cb: Callback<CloseFactorUpdated>): void;
  once(
    event: "CloseFactorUpdated",
    options: EventOptions,
    cb: Callback<CloseFactorUpdated>
  ): void;

  once(
    event: "CollateralFactorUpdated",
    cb: Callback<CollateralFactorUpdated>
  ): void;
  once(
    event: "CollateralFactorUpdated",
    options: EventOptions,
    cb: Callback<CollateralFactorUpdated>
  ): void;

  once(event: "FlashLoan", cb: Callback<FlashLoan>): void;
  once(
    event: "FlashLoan",
    options: EventOptions,
    cb: Callback<FlashLoan>
  ): void;

  once(event: "KeeperUpdated", cb: Callback<KeeperUpdated>): void;
  once(
    event: "KeeperUpdated",
    options: EventOptions,
    cb: Callback<KeeperUpdated>
  ): void;

  once(
    event: "LABDistributorUpdated",
    cb: Callback<LABDistributorUpdated>
  ): void;
  once(
    event: "LABDistributorUpdated",
    options: EventOptions,
    cb: Callback<LABDistributorUpdated>
  ): void;

  once(
    event: "LiquidationIncentiveUpdated",
    cb: Callback<LiquidationIncentiveUpdated>
  ): void;
  once(
    event: "LiquidationIncentiveUpdated",
    options: EventOptions,
    cb: Callback<LiquidationIncentiveUpdated>
  ): void;

  once(event: "MarketEntered", cb: Callback<MarketEntered>): void;
  once(
    event: "MarketEntered",
    options: EventOptions,
    cb: Callback<MarketEntered>
  ): void;

  once(event: "MarketExited", cb: Callback<MarketExited>): void;
  once(
    event: "MarketExited",
    options: EventOptions,
    cb: Callback<MarketExited>
  ): void;

  once(event: "MarketListed", cb: Callback<MarketListed>): void;
  once(
    event: "MarketListed",
    options: EventOptions,
    cb: Callback<MarketListed>
  ): void;

  once(event: "MarketRedeem", cb: Callback<MarketRedeem>): void;
  once(
    event: "MarketRedeem",
    options: EventOptions,
    cb: Callback<MarketRedeem>
  ): void;

  once(event: "MarketSupply", cb: Callback<MarketSupply>): void;
  once(
    event: "MarketSupply",
    options: EventOptions,
    cb: Callback<MarketSupply>
  ): void;

  once(event: "NftCoreUpdated", cb: Callback<NftCoreUpdated>): void;
  once(
    event: "NftCoreUpdated",
    options: EventOptions,
    cb: Callback<NftCoreUpdated>
  ): void;

  once(event: "OwnershipTransferred", cb: Callback<OwnershipTransferred>): void;
  once(
    event: "OwnershipTransferred",
    options: EventOptions,
    cb: Callback<OwnershipTransferred>
  ): void;

  once(event: "Paused", cb: Callback<Paused>): void;
  once(event: "Paused", options: EventOptions, cb: Callback<Paused>): void;

  once(
    event: "RebateDistributorUpdated",
    cb: Callback<RebateDistributorUpdated>
  ): void;
  once(
    event: "RebateDistributorUpdated",
    options: EventOptions,
    cb: Callback<RebateDistributorUpdated>
  ): void;

  once(event: "SupplyCapUpdated", cb: Callback<SupplyCapUpdated>): void;
  once(
    event: "SupplyCapUpdated",
    options: EventOptions,
    cb: Callback<SupplyCapUpdated>
  ): void;

  once(event: "Unpaused", cb: Callback<Unpaused>): void;
  once(event: "Unpaused", options: EventOptions, cb: Callback<Unpaused>): void;

  once(event: "ValidatorUpdated", cb: Callback<ValidatorUpdated>): void;
  once(
    event: "ValidatorUpdated",
    options: EventOptions,
    cb: Callback<ValidatorUpdated>
  ): void;
}

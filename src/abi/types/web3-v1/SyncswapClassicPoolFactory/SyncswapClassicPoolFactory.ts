/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type PoolCreated = ContractEventLog<{
  token0: string;
  token1: string;
  pool: string;
  0: string;
  1: string;
  2: string;
}>;

export interface SyncswapClassicPoolFactory extends BaseContract {
  public constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): SyncswapClassicPoolFactory;
  clone(): SyncswapClassicPoolFactory;
  methods: {
    createPool(data: string | number[]): NonPayableTransactionObject<string>;

    getDeployData(): NonPayableTransactionObject<string>;

    getPool(arg0: string, arg1: string): NonPayableTransactionObject<string>;

    getSwapFee(
      pool: string,
      sender: string,
      tokenIn: string,
      tokenOut: string,
      data: string | number[]
    ): NonPayableTransactionObject<string>;

    master(): NonPayableTransactionObject<string>;
  };
  events: {
    PoolCreated(cb?: Callback<PoolCreated>): EventEmitter;
    PoolCreated(
      options?: EventOptions,
      cb?: Callback<PoolCreated>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "PoolCreated", cb: Callback<PoolCreated>): void;
  once(
    event: "PoolCreated",
    options: EventOptions,
    cb: Callback<PoolCreated>
  ): void;
}

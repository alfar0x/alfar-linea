/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type OwnershipTransferred = ContractEventLog<{
  previousOwner: string;
  newOwner: string;
  0: string;
  1: string;
}>;
export type WooPoolChanged = ContractEventLog<{
  newPool: string;
  0: string;
}>;
export type WooRouterSwap = ContractEventLog<{
  swapType: string;
  fromToken: string;
  toToken: string;
  fromAmount: string;
  toAmount: string;
  from: string;
  to: string;
  rebateTo: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
  5: string;
  6: string;
  7: string;
}>;

export interface WoofiRouter extends BaseContract {
  public constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): WoofiRouter;
  clone(): WoofiRouter;
  methods: {
    WETH(): NonPayableTransactionObject<string>;

    externalSwap(
      approveTarget: string,
      swapTarget: string,
      fromToken: string,
      toToken: string,
      fromAmount: number | string | BN,
      minToAmount: number | string | BN,
      to: string,
      data: string | number[]
    ): PayableTransactionObject<string>;

    inCaseTokenGotStuck(stuckToken: string): NonPayableTransactionObject<void>;

    isWhitelisted(arg0: string): NonPayableTransactionObject<boolean>;

    owner(): NonPayableTransactionObject<string>;

    querySwap(
      fromToken: string,
      toToken: string,
      fromAmount: number | string | BN
    ): NonPayableTransactionObject<string>;

    quoteToken(): NonPayableTransactionObject<string>;

    renounceOwnership(): NonPayableTransactionObject<void>;

    setPool(newPool: string): NonPayableTransactionObject<void>;

    setWhitelisted(
      target: string,
      whitelisted: boolean
    ): NonPayableTransactionObject<void>;

    swap(
      fromToken: string,
      toToken: string,
      fromAmount: number | string | BN,
      minToAmount: number | string | BN,
      to: string,
      rebateTo: string
    ): PayableTransactionObject<string>;

    transferOwnership(newOwner: string): NonPayableTransactionObject<void>;

    tryQuerySwap(
      fromToken: string,
      toToken: string,
      fromAmount: number | string | BN
    ): NonPayableTransactionObject<string>;

    wooPool(): NonPayableTransactionObject<string>;
  };
  events: {
    OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter;
    OwnershipTransferred(
      options?: EventOptions,
      cb?: Callback<OwnershipTransferred>
    ): EventEmitter;

    WooPoolChanged(cb?: Callback<WooPoolChanged>): EventEmitter;
    WooPoolChanged(
      options?: EventOptions,
      cb?: Callback<WooPoolChanged>
    ): EventEmitter;

    WooRouterSwap(cb?: Callback<WooRouterSwap>): EventEmitter;
    WooRouterSwap(
      options?: EventOptions,
      cb?: Callback<WooRouterSwap>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "OwnershipTransferred", cb: Callback<OwnershipTransferred>): void;
  once(
    event: "OwnershipTransferred",
    options: EventOptions,
    cb: Callback<OwnershipTransferred>
  ): void;

  once(event: "WooPoolChanged", cb: Callback<WooPoolChanged>): void;
  once(
    event: "WooPoolChanged",
    options: EventOptions,
    cb: Callback<WooPoolChanged>
  ): void;

  once(event: "WooRouterSwap", cb: Callback<WooRouterSwap>): void;
  once(
    event: "WooRouterSwap",
    options: EventOptions,
    cb: Callback<WooRouterSwap>
  ): void;
}

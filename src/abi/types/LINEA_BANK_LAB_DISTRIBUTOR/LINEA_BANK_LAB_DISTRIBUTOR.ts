/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type Claimed = ContractEventLog<{
  user: string;
  amount: string;
  0: string;
  1: string;
}>;
export type Compound = ContractEventLog<{
  user: string;
  amount: string;
  0: string;
  1: string;
}>;
export type DistributionSpeedUpdated = ContractEventLog<{
  gToken: string;
  supplySpeed: string;
  borrowSpeed: string;
  0: string;
  1: string;
  2: string;
}>;
export type OwnershipTransferred = ContractEventLog<{
  previousOwner: string;
  newOwner: string;
  0: string;
  1: string;
}>;
export type Paused = ContractEventLog<{
  account: string;
  0: string;
}>;
export type Unpaused = ContractEventLog<{
  account: string;
  0: string;
}>;

export interface LINEA_BANK_LAB_DISTRIBUTOR extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): LINEA_BANK_LAB_DISTRIBUTOR;
  clone(): LINEA_BANK_LAB_DISTRIBUTOR;
  methods: {
    BOOST_MAX(): NonPayableTransactionObject<string>;

    BOOST_PORTION(): NonPayableTransactionObject<string>;

    LAB(): NonPayableTransactionObject<string>;

    accountDistributionInfoOf(
      market: string,
      account: string
    ): NonPayableTransactionObject<[string, string, string, string, string]>;

    accountDistributions(
      arg0: string,
      arg1: string
    ): NonPayableTransactionObject<{
      accuredLAB: string;
      boostedSupply: string;
      boostedBorrow: string;
      accPerShareSupply: string;
      accPerShareBorrow: string;
      0: string;
      1: string;
      2: string;
      3: string;
      4: string;
    }>;

    accuredLAB(
      markets: string[],
      account: string
    ): NonPayableTransactionObject<string>;

    approve(
      _spender: string,
      amount: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    apyDistributionOf(
      market: string,
      account: string
    ): NonPayableTransactionObject<[string, string, string, string]>;

    boostedRatioOf(
      market: string,
      account: string
    ): NonPayableTransactionObject<{
      boostedSupplyRatio: string;
      boostedBorrowRatio: string;
      0: string;
      1: string;
    }>;

    claim(
      markets: string[],
      account: string
    ): NonPayableTransactionObject<void>;

    compound(
      markets: string[],
      account: string
    ): NonPayableTransactionObject<void>;

    core(): NonPayableTransactionObject<string>;

    distributionInfoOf(
      market: string
    ): NonPayableTransactionObject<
      [string, string, string, string, string, string, string]
    >;

    distributions(arg0: string): NonPayableTransactionObject<{
      supplySpeed: string;
      borrowSpeed: string;
      totalBoostedSupply: string;
      totalBoostedBorrow: string;
      accPerShareSupply: string;
      accPerShareBorrow: string;
      accruedAt: string;
      0: string;
      1: string;
      2: string;
      3: string;
      4: string;
      5: string;
      6: string;
    }>;

    initialize(
      _lab: string,
      _core: string,
      _locker: string,
      _priceCalculator: string
    ): NonPayableTransactionObject<void>;

    initialized(): NonPayableTransactionObject<boolean>;

    kick(user: string): NonPayableTransactionObject<void>;

    locker(): NonPayableTransactionObject<string>;

    notifyBorrowUpdated(
      market: string,
      user: string
    ): NonPayableTransactionObject<void>;

    notifySupplyUpdated(
      market: string,
      user: string
    ): NonPayableTransactionObject<void>;

    notifyTransferred(
      qToken: string,
      sender: string,
      receiver: string
    ): NonPayableTransactionObject<void>;

    owner(): NonPayableTransactionObject<string>;

    pause(): NonPayableTransactionObject<void>;

    paused(): NonPayableTransactionObject<boolean>;

    priceCalculator(): NonPayableTransactionObject<string>;

    renounceOwnership(): NonPayableTransactionObject<void>;

    setDistributionSpeed(
      qToken: string,
      supplySpeed: number | string | BN,
      borrowSpeed: number | string | BN
    ): NonPayableTransactionObject<void>;

    setLocker(_locker: string): NonPayableTransactionObject<void>;

    setPriceCalculator(
      _priceCalculator: string
    ): NonPayableTransactionObject<void>;

    transferOwnership(newOwner: string): NonPayableTransactionObject<void>;

    unpause(): NonPayableTransactionObject<void>;

    updateAccountBoostedInfo(user: string): NonPayableTransactionObject<void>;

    withdrawReward(
      receiver: string,
      amount: number | string | BN
    ): NonPayableTransactionObject<void>;
  };
  events: {
    Claimed(cb?: Callback<Claimed>): EventEmitter;
    Claimed(options?: EventOptions, cb?: Callback<Claimed>): EventEmitter;

    Compound(cb?: Callback<Compound>): EventEmitter;
    Compound(options?: EventOptions, cb?: Callback<Compound>): EventEmitter;

    DistributionSpeedUpdated(
      cb?: Callback<DistributionSpeedUpdated>
    ): EventEmitter;
    DistributionSpeedUpdated(
      options?: EventOptions,
      cb?: Callback<DistributionSpeedUpdated>
    ): EventEmitter;

    OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter;
    OwnershipTransferred(
      options?: EventOptions,
      cb?: Callback<OwnershipTransferred>
    ): EventEmitter;

    Paused(cb?: Callback<Paused>): EventEmitter;
    Paused(options?: EventOptions, cb?: Callback<Paused>): EventEmitter;

    Unpaused(cb?: Callback<Unpaused>): EventEmitter;
    Unpaused(options?: EventOptions, cb?: Callback<Unpaused>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "Claimed", cb: Callback<Claimed>): void;
  once(event: "Claimed", options: EventOptions, cb: Callback<Claimed>): void;

  once(event: "Compound", cb: Callback<Compound>): void;
  once(event: "Compound", options: EventOptions, cb: Callback<Compound>): void;

  once(
    event: "DistributionSpeedUpdated",
    cb: Callback<DistributionSpeedUpdated>
  ): void;
  once(
    event: "DistributionSpeedUpdated",
    options: EventOptions,
    cb: Callback<DistributionSpeedUpdated>
  ): void;

  once(event: "OwnershipTransferred", cb: Callback<OwnershipTransferred>): void;
  once(
    event: "OwnershipTransferred",
    options: EventOptions,
    cb: Callback<OwnershipTransferred>
  ): void;

  once(event: "Paused", cb: Callback<Paused>): void;
  once(event: "Paused", options: EventOptions, cb: Callback<Paused>): void;

  once(event: "Unpaused", cb: Callback<Unpaused>): void;
  once(event: "Unpaused", options: EventOptions, cb: Callback<Unpaused>): void;
}
